"use strict";(self.webpackChunkcddl_codegen_documentation=self.webpackChunkcddl_codegen_documentation||[]).push([[766],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,f=c["".concat(p,".").concat(m)]||c[m]||d[m]||r;return n?i.createElement(f,o(o({ref:t},u),{},{components:n})):i.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2407:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var i=n(7462),a=(n(7294),n(3905));const r={sidebar_position:3},o="Current capacities",l={unversionedId:"current_capacities",id:"current_capacities",title:"Current capacities",description:"Types",source:"@site/docs/current_capacities.mdx",sourceDirName:".",slug:"/current_capacities",permalink:"/cddl-codegen/current_capacities",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Command line flags",permalink:"/cddl-codegen/command_line_flags"},next:{title:"Output format",permalink:"/cddl-codegen/output_format"}},p={},s=[{value:"Types",id:"types",level:2},{value:"Group choices",id:"group-choices",level:2},{value:"Type choices",id:"type-choices",level:2}],u={toc:s},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"current-capacities"},"Current capacities"),(0,a.kt)("h2",{id:"types"},"Types"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Primitives - ",(0,a.kt)("inlineCode",{parentName:"li"},"bytes"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"bstr"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"tstr"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"text"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"uint"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"nint")),(0,a.kt)("li",{parentName:"ul"},"Fixed values - ",(0,a.kt)("inlineCode",{parentName:"li"},"null"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"nil"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"false")),(0,a.kt)("li",{parentName:"ul"},"Array values - ",(0,a.kt)("inlineCode",{parentName:"li"},"[uint]")),(0,a.kt)("li",{parentName:"ul"},"Table types as members - ",(0,a.kt)("inlineCode",{parentName:"li"},"foo = ( x: { * a => b } )")),(0,a.kt)("li",{parentName:"ul"},"Inline groups at root level - ",(0,a.kt)("inlineCode",{parentName:"li"},"foo = ( a: uint, b: uint)")),(0,a.kt)("li",{parentName:"ul"},"Array groups - ",(0,a.kt)("inlineCode",{parentName:"li"},"foo = [uint, tstr, 0, bytes]")),(0,a.kt)("li",{parentName:"ul"},"Map groups (both struct-type and table-type) - ",(0,a.kt)("inlineCode",{parentName:"li"},"foo = { a: uint, b: tstr }")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"bar = { * uint => tstr }")),(0,a.kt)("li",{parentName:"ul"},"Embedding groups in other groups - ",(0,a.kt)("inlineCode",{parentName:"li"},"foo = (0, bstr) bar = [uint, foo, foo]")),(0,a.kt)("li",{parentName:"ul"},"Group choices - ",(0,a.kt)("inlineCode",{parentName:"li"},"foo = [ 0, uint // 1, tstr, uint // tstr }")),(0,a.kt)("li",{parentName:"ul"},"Tagged major types - ",(0,a.kt)("inlineCode",{parentName:"li"},"rational =  #6.30([ numerator : uint, denominator : uint])")),(0,a.kt)("li",{parentName:"ul"},"Optional fields - ",(0,a.kt)("inlineCode",{parentName:"li"},"foo = { ? 0 : bytes }")),(0,a.kt)("li",{parentName:"ul"},"Type aliases - ",(0,a.kt)("inlineCode",{parentName:"li"},"foo = bar")),(0,a.kt)("li",{parentName:"ul"},"Type choices - ",(0,a.kt)("inlineCode",{parentName:"li"},"foo = uint / tstr")),(0,a.kt)("li",{parentName:"ul"},"Serialization for all supported types."),(0,a.kt)("li",{parentName:"ul"},"Deserialization for almost all supported types (see limitations section)."),(0,a.kt)("li",{parentName:"ul"},"CDDL Generics - ",(0,a.kt)("inlineCode",{parentName:"li"},"foo<T> = [T]"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"bar = foo<uint>")),(0,a.kt)("li",{parentName:"ul"},"Length bounds - ",(0,a.kt)("inlineCode",{parentName:"li"},"foo = bytes .size (0..32)")),(0,a.kt)("li",{parentName:"ul"},"cbor in bytes - ",(0,a.kt)("inlineCode",{parentName:"li"},"foo_bytes = bytes .cbor foo")),(0,a.kt)("li",{parentName:"ul"},"Support for the CDDL standard prelude (using raw CDDL from the RFC) - ",(0,a.kt)("inlineCode",{parentName:"li"},"biguint"),", etc"),(0,a.kt)("li",{parentName:"ul"},"default values - ",(0,a.kt)("inlineCode",{parentName:"li"},"? key : uint .default 0"))),(0,a.kt)("p",null,"We generate getters for all fields, and setters for optional fields. Mandatory fields are set via the generated constructor. All wasm-facing functions are set to take references for non-primitives and clone when needed. Returns are also cloned. This helps make usage from wasm more memory safe."),(0,a.kt)("p",null,"Identifiers and fields are also changed to rust style. ie ",(0,a.kt)("inlineCode",{parentName:"p"},"foo_bar = { Field-Name: text }")," gets converted into ",(0,a.kt)("inlineCode",{parentName:"p"},"struct FooBar { field_name: String }")),(0,a.kt)("h2",{id:"group-choices"},"Group choices"),(0,a.kt)("p",null,"Group choices are handled as an enum with each choice being a variant. This enum is then wrapped around a wasm-exposed struct as ",(0,a.kt)("inlineCode",{parentName:"p"},"wasm_bindgen")," does not support rust enums with members/values.\nGroup choices that have only a single non-fixed-value field use just that field as the enum variant, otherwise we create a ",(0,a.kt)("inlineCode",{parentName:"p"},"GroupN")," for the ",(0,a.kt)("inlineCode",{parentName:"p"},"Nth")," variant enum with the fields of that group choice. Any fixed values are resolved purely in serialization code, so ",(0,a.kt)("inlineCode",{parentName:"p"},'0, "hello", uint')," puts the ",(0,a.kt)("inlineCode",{parentName:"p"},"uint")," in the enum variant directly instead of creating a new struct."),(0,a.kt)("h2",{id:"type-choices"},"Type choices"),(0,a.kt)("p",null,"Type choices are handled via enums as well with the name defaulting to ",(0,a.kt)("inlineCode",{parentName:"p"},"AOrBOrC")," for ",(0,a.kt)("inlineCode",{parentName:"p"},"A / B / C")," when inlined as a field/etc, and will take on the type identifier if provided ie ",(0,a.kt)("inlineCode",{parentName:"p"},"foo = A / B / C")," would be ",(0,a.kt)("inlineCode",{parentName:"p"},"Foo"),".\nAny field that is ",(0,a.kt)("inlineCode",{parentName:"p"},"T / null")," is transformed as a special case into ",(0,a.kt)("inlineCode",{parentName:"p"},"Option<T>")," rather than creating a ",(0,a.kt)("inlineCode",{parentName:"p"},"TOrNull")," enum."),(0,a.kt)("p",null,"A special case for this is when all types are fixed values e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},'foo = 0 / 1 / "hello"'),", in which case we generate a special c-style enum in the rust. This will have wasm_bindgen tags so it can be directly used in the wasm crate. Encoding variables (for ",(0,a.kt)("inlineCode",{parentName:"p"},"--preserve-encodings=true"),") are stored where the enum is used like with other primitives."))}d.isMDXComponent=!0}}]);