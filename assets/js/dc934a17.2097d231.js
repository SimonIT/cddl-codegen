"use strict";(self.webpackChunkcddl_codegen_documentation=self.webpackChunkcddl_codegen_documentation||[]).push([[91],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,f=d["".concat(l,".").concat(u)]||d[u]||m[u]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3637:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:6},o="Wasm Differences",s={unversionedId:"wasm_differences",id:"wasm_differences",title:"Wasm Differences",description:"In the wasm crate we can't always go one to one with the rust crate. Here are some differences/extra types in the WASM create. AsRef From and Into are implemented to go between the rust and wasm crate types to help.",source:"@site/docs/wasm_differences.mdx",sourceDirName:".",slug:"/wasm_differences",permalink:"/cddl-codegen/wasm_differences",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Output format",permalink:"/cddl-codegen/output_format"},next:{title:"Comment DSL",permalink:"/cddl-codegen/comment_dsl"}},l={},p=[{value:"Heterogeneous Arrays",id:"heterogeneous-arrays",level:2},{value:"Tables",id:"tables",level:2},{value:"Enums",id:"enums",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"wasm-differences"},"Wasm Differences"),(0,a.kt)("p",null,"In the wasm crate we can't always go one to one with the rust crate. Here are some differences/extra types in the WASM create. ",(0,a.kt)("inlineCode",{parentName:"p"},"AsRef")," ",(0,a.kt)("inlineCode",{parentName:"p"},"From")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Into")," are implemented to go between the rust and wasm crate types to help."),(0,a.kt)("h2",{id:"heterogeneous-arrays"},"Heterogeneous Arrays"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"wasm_bindgen")," cannot expose doubly-nested types like ",(0,a.kt)("inlineCode",{parentName:"p"},"Vec<Vec<T>")," which can be a limitation if ",(0,a.kt)("inlineCode",{parentName:"p"},"T")," was a non-byte primtive.\nAny array of non-primitives such as ",(0,a.kt)("inlineCode",{parentName:"p"},"[foo]")," will generate another type called ",(0,a.kt)("inlineCode",{parentName:"p"},"FooList")," which supports all basic array operations.\nThis lets us get around the ",(0,a.kt)("inlineCode",{parentName:"p"},"wasm_bindgen")," limitation (without implementing cross-boundary traits which could be inefficient/tedious/complicated).\nThis array wrapper implements ",(0,a.kt)("inlineCode",{parentName:"p"},"len() -> self"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"get(usize) -> T")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"add(T)"),"."),(0,a.kt)("h2",{id:"tables"},"Tables"),(0,a.kt)("p",null,"Map literals also generate a type for them with ",(0,a.kt)("inlineCode",{parentName:"p"},"len() -> usize")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"insert(K, V) -> Option<V>"),". The table type will have a ",(0,a.kt)("inlineCode",{parentName:"p"},"MapKeyToValue")," name for whichever ",(0,a.kt)("inlineCode",{parentName:"p"},"Key")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Value")," types it's exposed as if it's anonymously inlined a as a member, or will take on the identifier if it's a named one."),(0,a.kt)("h2",{id:"enums"},"Enums"),(0,a.kt)("p",null,"Both type/group choices generate rust-style enums. On the wasm side we can't do that so we directly wrap the rust type, and then provide a ",(0,a.kt)("inlineCode",{parentName:"p"},"FooKind")," c-style enum for each rust enum ",(0,a.kt)("inlineCode",{parentName:"p"},"Foo")," just for checking which variant it is."))}m.isMDXComponent=!0}}]);